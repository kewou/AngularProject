{"ast":null,"code":"var _class;\nimport { environment } from '../../../environments/environment';\nimport { jwtDecode } from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class UserService {\n  constructor(http, cookieService) {\n    this.http = http;\n    this.cookieService = cookieService;\n    this.backendUrl = environment.backendUrl;\n    this.estConnecte = false;\n  }\n  getUsers() {\n    const url = `${this.backendUrl}/users`;\n    return this.http.get(url);\n  }\n  loginUser(obj) {\n    const url = `${this.backendUrl}/authenticate`;\n    return this.http.post(url, obj);\n  }\n  estUtilisateurConnecte() {\n    return this.estConnecte;\n  }\n  connectOrDisconnect() {\n    this.estConnecte = this.estConnecte ? false : true;\n  }\n  getUserInfo() {\n    const token = this.cookieService.get('jwtToken');\n    const decodedToken = jwtDecode(token);\n    const username = decodedToken.sub;\n    console.log('Decoded Token:', decodedToken);\n    return this.http.get(`${this.backendUrl}/users/email/${username}`);\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAIA,SAASA,WAAW,QAAQ,mCAAmC;AAC/D,SAASC,SAAS,QAAQ,YAAY;;;;AAMtC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB,EAASC,aAA4B;IAArD,SAAI,GAAJD,IAAI;IAAqB,kBAAa,GAAbC,aAAa;IAFlD,eAAU,GAAGL,WAAW,CAACM,UAAU;IACnC,gBAAW,GAAG,KAAK;EACkD;EAE7EC,QAAQ;IACN,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACF,UAAU,QAAQ;IACtC,OAAO,IAAI,CAACF,IAAI,CAACK,GAAG,CAACD,GAAG,CAAC;EAC3B;EAEAE,SAAS,CAACC,GAAQ;IAChB,MAAMH,GAAG,GAAG,GAAG,IAAI,CAACF,UAAU,eAAe;IAC7C,OAAO,IAAI,CAACF,IAAI,CAACQ,IAAI,CAACJ,GAAG,EAACG,GAAG,CAAC;EAChC;EAEAE,sBAAsB;IACpB,OAAO,IAAI,CAACC,WAAW;EACzB;EAEAC,mBAAmB;IACjB,IAAI,CAACD,WAAW,GAAC,IAAI,CAACA,WAAW,GAAG,KAAK,GAAG,IAAI;EAClD;EAGAE,WAAW;IACT,MAAMC,KAAK,GAAG,IAAI,CAACZ,aAAa,CAACI,GAAG,CAAC,UAAU,CAAC;IAChD,MAAMS,YAAY,GAAGjB,SAAS,CAACgB,KAAK,CAAC;IACrC,MAAME,QAAQ,GAAGD,YAAY,CAACE,GAAG;IACjCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEJ,YAAY,CAAC;IAC3C,OAAO,IAAI,CAACd,IAAI,CAACK,GAAG,CAAC,GAAG,IAAI,CAACH,UAAU,gBAAgBa,QAAQ,EAAE,CAAC;EACpE;;SA/BWjB,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAqB,SAAXrB,MAAW;EAAAsB,YAFV;AAAM","names":["environment","jwtDecode","UserService","constructor","http","cookieService","backendUrl","getUsers","url","get","loginUser","obj","post","estUtilisateurConnecte","estConnecte","connectOrDisconnect","getUserInfo","token","decodedToken","username","sub","console","log","factory","providedIn"],"sourceRoot":"","sources":["/home/noumia/Documents/BeezyStart_Up/AngularProject/src/app/user/service/user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../modele/user';\nimport { Observable, of } from 'rxjs';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { jwtDecode } from \"jwt-decode\";\nimport { CookieService } from 'ngx-cookie-service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private backendUrl = environment.backendUrl;\n  private estConnecte = false;\n  constructor(private http: HttpClient,private cookieService: CookieService) { }\n\n  getUsers(): Observable<any>{\n    const url = `${this.backendUrl}/users`;\n    return this.http.get(url);\n  }\n\n  loginUser(obj: any) : Observable<any> {\n    const url = `${this.backendUrl}/authenticate`;\n    return this.http.post(url,obj);\n  }\n\n  estUtilisateurConnecte(): boolean {\n    return this.estConnecte;\n  }\n\n  connectOrDisconnect(){\n    this.estConnecte=this.estConnecte ? false : true;\n  }\n\n\n  getUserInfo(): Observable<any>{\n    const token = this.cookieService.get('jwtToken');\n    const decodedToken = jwtDecode(token);\n    const username = decodedToken.sub\n    console.log('Decoded Token:', decodedToken);\n    return this.http.get(`${this.backendUrl}/users/email/${username}`);\n  }\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}