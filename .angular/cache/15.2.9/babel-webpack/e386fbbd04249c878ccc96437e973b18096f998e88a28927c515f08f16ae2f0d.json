{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\nexport class JwtInterceptor {\n  constructor(cookieService) {\n    this.cookieService = cookieService;\n  }\n  intercept(request, next) {\n    //const localToken = localStorage.getItem(\"jwtToken\");\n    const localToken = this.cookieService.get('jwtToken');\n    request = request.clone({\n      headers: request.headers.set('Authorization', 'Bearer ' + localToken)\n    });\n    return next.handle(request);\n  }\n}\n_class = JwtInterceptor;\n_class.ɵfac = function JwtInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.CookieService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAEjC;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IACpD;IACA,MAAMC,UAAU,GAAG,IAAI,CAACJ,aAAa,CAACK,GAAG,CAAC,UAAU,CAAC;IACrDH,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;MAACC,OAAO,EAAEL,OAAO,CAACK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC,SAAS,GAAGJ,UAAU;IAAC,CAAC,CAAC;IAC/F,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;;SAXWJ,cAAc;;mBAAdA,MAAc;AAAA;;SAAdA,MAAc;EAAAY,SAAdZ,MAAc;AAAA","names":["JwtInterceptor","constructor","cookieService","intercept","request","next","localToken","get","clone","headers","set","handle","factory"],"sourceRoot":"","sources":["/home/noumia/Documents/BeezyStart_Up/AngularProject/src/modules/http/jwt.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpRequest,HttpHandler,HttpEvent,HttpInterceptor,HttpResponse} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CookieService } from 'ngx-cookie-service';\n\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor{\n\n  constructor(private cookieService: CookieService) {\n\n  }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    //const localToken = localStorage.getItem(\"jwtToken\");\n    const localToken = this.cookieService.get('jwtToken');\n    request = request.clone({headers: request.headers.set('Authorization','Bearer ' + localToken)});\n    return next.handle(request);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}